import streamlit as st
import requests
import json
import uuid
import base64

# üëâ KH·ªûI T·∫†O SESSION STATE n·∫øu ch∆∞a c√≥
if "cart" not in st.session_state:
    st.session_state.cart = []

if "view_cart" not in st.session_state:
    st.session_state.view_cart = False

from datetime import datetime

# CSS
st.markdown("""
<style>
.product-name {
    font-weight: bold;
    text-align: center;
    margin-top: 10px;
}
.product-price {
    color: blue;
    margin-top: 5px;
    font-size: 16px;
}
</style>
""", unsafe_allow_html=True)


# Danh s√°ch s·∫£n ph·∫©m
fruit_products = [
    {"name": "B∆° 034", "price": 35000, "image": "034.jpg"},
    {"name": "B∆° Booth", "price": 30000, "image": "booth.jpg"},
    {"name": "B∆° s√°p Nh·∫≠t", "price": 30000, "image": "sap_nhat.jpg"},
    {"name": "S·∫ßu ri√™ng Ri6", "price": 80000, "image": "ri6.jpg"},
    {"name": "S·∫ßu ri√™ng Dona", "price": 85000, "image": "dona.jpg"},
    {"name": "S·∫ßu ri√™ng MusangKing", "price": 155000, "image": "musangking.jpg"},
]


nut_products = [
    {"name": "H·∫°t ƒëi·ªÅu rang mu·ªëi", "price": 210000, "image": "hatdieu.jpg"},
    {"name": "H·∫°nh nh√¢n M·ªπ", "price": 220000, "image": "hanhnhan.jpg"},
    {"name": "Granola", "price": 150000, "image": "granola.jpg"},
    {"name": "Macca s·∫•y size ƒë·∫°i", "price": 230000, "image": "macca_lon.jpg"},
    {"name": "Macca s·∫•y size trung", "price": 210000, "image": "macca_nho.jpg"}
]

# Danh s√°ch h·∫øt h√†ng
trai_het = ["B∆° 034", "B∆° Booth", "B∆° s√°p Nh·∫≠t", "S·∫ßu ri√™ng Ri6", "S·∫ßu ri√™ng Dona"]
hat_het = ["H·∫°t ƒëi·ªÅu rang mu·ªëi","H·∫°nh nh√¢n M·ªπ", "Granola", "Macca s·∫•y size ƒë·∫°i", "Macca s·∫•y size trung"]

# G·∫Øn c·ªù h·∫øt h√†ng
for item in fruit_products:
    item["het_hang"] = item["name"] in trai_het

for item in nut_products:
    item["het_hang"] = item["name"] in hat_het




def get_base64_of_bin_file(bin_file):
    with open(bin_file, 'rb') as f:
        data = f.read()
    return base64.b64encode(data).decode()

bin_str = get_base64_of_bin_file("avo8.jpg")

st.markdown(
    f"""
    <style>
    .stApp {{
        background-image: url("data:image/jpg;base64,{bin_str}");
        background-size: cover;
        background-position: center;
        background-attachment: fixed;
        opacity: 0.9;
    }}

    h1 {{
        text-align: center;
        font-size: 50px;
        color: #ffffff;
        text-shadow: 2px 2px 4px #000000;
    }}
    </style>
    """,
    unsafe_allow_html=True
)

st.markdown("<h1>N√¥ng s·∫£n ƒêƒÉk LƒÉk</h1>", unsafe_allow_html=True)


# st.title("N√¥ng s·∫£n ƒêƒÉk LƒÉk")

st.markdown("""
    <style>
    .stTabs [data-baseweb="tab"] {
        width: 33.33%;
        padding: 20px 0;
        font-size: 20px;
        font-weight: bold;
        background-color: #f0f0f0;
        border-radius: 10px 10px 0 0;
        margin-right: 5px;
    }
    .stTabs [data-baseweb="tab"]:hover {
        background-color: #e0e0e0;
        cursor: pointer;
    }
    .stTabs [aria-selected="true"] {
        background-color: #d9f0ff !important;
        color: #000;
    }
    </style>
""", unsafe_allow_html=True)


tab1, tab2, tab3 = st.tabs(["S·∫£n ph·∫©m Qu·∫£", "S·∫£n ph·∫©m H·∫°t", "V·ªÅ C·ª≠a h√†ng"])

with tab1:
    st.subheader("Danh s√°ch Qu·∫£")
    for i in range(0, len(fruit_products), 3):
        cols = st.columns(3)
        for col, p in zip(cols, fruit_products[i:i+3]):
            with col:
                st.image(p["image"], use_container_width=True)
                st.markdown(f"<div class='product-name'>{p['name']}</div>", unsafe_allow_html=True)
                st.markdown(f"<div class='product-price'>Gi√°: {p['price']:,} ƒë / kg</div>", unsafe_allow_html=True)
                if p.get("het_hang", False):
                    st.markdown(" <span style='color:red'>ƒê√£ h·∫øt h√†ng</span>", unsafe_allow_html=True)
                else:
                    qty = st.number_input(f"S·ªë k√Ω - {p['name']}", min_value=1, max_value=100, value=1, key=f"qty_{p['name']}")
                    if st.button(f"üõí Th√™m - {p['name']}", key=f"btn_{p['name']}"):
                        st.session_state.cart.append({
                            "name": p["name"],
                            "price": p["price"],
                            "quantity": qty
                        })
                        st.success(f"‚úÖ ƒê√£ th√™m {qty} kg {p['name']} v√†o gi·ªè h√†ng!")

with tab2:
    st.subheader("Danh s√°ch H·∫°t")
    for i in range(0, len(nut_products), 3):
        cols = st.columns(3)
        for col, p in zip(cols, nut_products[i:i+3]):
            with col:
                st.image(p["image"], use_container_width=True)
                st.markdown(f"<div class='product-name'>{p['name']}</div>", unsafe_allow_html=True)
                st.markdown(f"<div class='product-price'>Gi√°: {p['price']:,} ƒë / kg</div>", unsafe_allow_html=True)
                if p.get("het_hang", False):
                    st.markdown(" <span style='color:red'>ƒê√£ h·∫øt h√†ng</span>", unsafe_allow_html=True)
                else:
                    qty = st.number_input(f"S·ªë k√Ω - {p['name']}", min_value=0.5, max_value=100.0, value=1.0, step=0.5, key=f"qty_{p['name']}")
                    if st.button(f"üõí Th√™m - {p['name']}", key=f"btn_{p['name']}"):
                        st.session_state.cart.append({
                            "name": p["name"],
                            "price": p["price"],
                            "quantity": qty
                        })
                        st.success(f"‚úÖ ƒê√£ th√™m {qty} kg {p['name']} v√†o gi·ªè h√†ng!")


            st.markdown('</div>', unsafe_allow_html=True)



with st.expander("üõí Xem gi·ªè h√†ng", expanded=False):
    st.write("### üßæ Gi·ªè h√†ng c·ªßa b·∫°n:")
    if st.session_state.cart:
        total = 0
        cart_items_to_remove = []  # Danh s√°ch index s·∫£n ph·∫©m c·∫ßn xo√°

        for i, item in enumerate(st.session_state.cart):
            item_total = item["price"] * item["quantity"]
            st.write(f"- {item['name']}: {item['quantity']} kg x {item['price']:,} ƒë = {item_total:,} ƒë")

            # N√∫t xo√° s·∫£n ph·∫©m
            if st.button(f"‚ùå Xo√° {item['name']}", key=f"remove_{i}"):
                cart_items_to_remove.append(i)

            total += item_total

        # Xo√° c√°c s·∫£n ph·∫©m c·∫ßn xo√°
        if cart_items_to_remove:
            for i in sorted(cart_items_to_remove, reverse=True):
                del st.session_state.cart[i]
            st.rerun()  # Refresh l·∫°i app

        st.write(f"**T·ªïng c·ªông: {total:,} ƒë**")

    else:
        st.info("Gi·ªè h√†ng c·ªßa b·∫°n ƒëang tr·ªëng.")



# Hi·ªÉn th·ªã form thu th·∫≠p th√¥ng tin kh√°ch h√†ng sau khi xem gi·ªè h√†ng
if "cart" in st.session_state and st.session_state.cart:
    with st.form("customer_info_form"):
        st.markdown("### üìã Th√¥ng tin kh√°ch h√†ng")
        customer_name = st.text_input("üë§ H·ªç v√† t√™n", placeholder="Nh·∫≠p t√™n ƒë·∫ßy ƒë·ªß c·ªßa b·∫°n")
        phone = st.text_input("üì± S·ªë ƒëi·ªán tho·∫°i", placeholder="V√≠ d·ª•: 0909123456")
        address = st.text_area("üè† ƒê·ªãa ch·ªâ giao h√†ng", placeholder="S·ªë nh√†, ƒë∆∞·ªùng, ph∆∞·ªùng/x√£, qu·∫≠n/huy·ªán, t·ªânh/th√†nh")
        note = st.text_area("üìù Ghi ch√∫ th√™m", placeholder="(Kh√¥ng b·∫Øt bu·ªôc)")
        payment_method = st.radio(
            "üí≥ H√¨nh th·ª©c thanh to√°n",
            ("Chuy·ªÉn kho·∫£n tr·ª±c ti·∫øp", "Thanh to√°n khi nh·∫≠n h√†ng (COD)"),
            index=0
            )
        
        submit = st.form_submit_button("‚úÖ X√°c nh·∫≠n ƒë·∫∑t h√†ng")
        if submit:
            if not customer_name or not phone or not address:
                st.error("‚ùó Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin b·∫Øt bu·ªôc.")
            else:
                if payment_method == "Chuy·ªÉn kho·∫£n tr·ª±c ti·∫øp":
                    st.markdown("**üëâ Vui l√≤ng chuy·ªÉn kho·∫£n ƒë·∫øn th√¥ng tin sau, n·ªôi dung chuy·ªÉn kho·∫£n l√† S·ªê ƒêI·ªÜN THO·∫†I ƒê·∫∂T H√ÄNG:**")
                    st.markdown("- Ng√¢n h√†ng: BIDV")
                    st.markdown("- S·ªë t√†i kho·∫£n: 1680001755")
                    st.markdown("- Ch·ªß t√†i kho·∫£n: Tr·∫ßn H√† T∆∞·ªùng Vi")
                    # Hi·ªÉn th·ªã m√£ QR ng√¢n h√†ng
                    st.image("qr_bank.jpg", caption="Qu√©t ƒë·ªÉ chuy·ªÉn kho·∫£n", width=300)

                st.success("C·∫£m ∆°n b·∫°n ƒë√£ mua h√†ng. B·∫°n vui l√≤ng ch·ªù trong gi√¢y l√°t")

                # üëâ T·∫†O order_id duy nh·∫•t cho ƒë∆°n h√†ng
                order_id = str(uuid.uuid4())[:5]  # L·∫•y 5 k√Ω t·ª± ƒë·∫ßu ƒë·ªÉ d·ªÖ nh√¨n

                # üëâ T√≠nh t·ªïng ti·ªÅn ƒë∆°n h√†ng
                order_total_amount = sum(item["price"] * item["quantity"] for item in st.session_state.cart)

                # G·ª≠i ƒë∆°n h√†ng v·ªÅ Google Sheets TR∆Ø·ªöC khi x√≥a gi·ªè h√†ng
                order_data = [{
                    "order_id": order_id,
                    "name": customer_name,
                    "phone": phone,
                    "address": address,
                    "note": note,
                    "product": item["name"],
                    "quantity": item["quantity"],
                    "price": item["price"],
                    "total": item["price"] * item["quantity"],
                    "order_total": order_total_amount,
                    "payment_method": payment_method
                    
                } for item in st.session_state.cart]

                # G·ª≠i d·ªØ li·ªáu ƒë·∫øn webhook Google Apps Script
                webhook_url = "https://script.google.com/macros/s/AKfycbzSV-4E7NImctVlaHBFFtBSDiZVoqWD3IDLZ2Hw2LzwOyi09YtM0phfe9BDxBR051SuWQ/exec"  # Thay b·∫±ng link c·ªßa b·∫°n
                response = requests.post(webhook_url, data=json.dumps(order_data))

                if response.status_code == 200:
                    st.success("ƒê·∫∑t h√†ng th√†nh c√¥ng!")
                else:
                    st.error(f"‚ùå G·ª≠i ƒë∆°n h√†ng th·∫•t b·∫°i. M√£ l·ªói: {response.status_code}")

                # Hi·ªÉn th·ªã ƒë∆°n h√†ng t√≥m t·∫Øt
                st.write("### üßæ Th√¥ng tin ƒë∆°n h√†ng:")
                total = 0
                for item in st.session_state.cart:
                    item_total = item["price"] * item["quantity"]
                    st.write(f"- {item['name']}: {item['quantity']} kg x {item['price']:,} ƒë = {item_total:,} ƒë")
                    total += item_total
                st.write(f"**T·ªïng c·ªông: {total:,} ƒë**")

                # Hi·ªÉn th·ªã th√¥ng tin kh√°ch h√†ng
                st.write("### üë§ Th√¥ng tin Kh√°ch h√†ng:")
                st.write(f"- H·ªç t√™n: {customer_name}")
                st.write(f"- S·ªë ƒëi·ªán tho·∫°i: {phone}")
                st.write(f"- ƒê·ªãa ch·ªâ: {address}")
                if note:
                    st.write(f"- Ghi ch√∫: {note}")
 

 
with tab3:
    st.subheader("üè™ V·ªÅ c·ª≠a h√†ng N√¥ng s·∫£n ƒêƒÉk LƒÉk")
    st.image("macatree.jpg", use_container_width=True)
    st.markdown("""
    **Ch√†o m·ª´ng b·∫°n ƒë·∫øn v·ªõi C·ª≠a h√†ng N√¥ng s·∫£n ƒêƒÉk LƒÉk!**

    üçÉ T·ª´ nh·ªØng v√πng ƒë·∫•t m√†u m·ª° c·ªßa T√¢y Nguy√™n, ch√∫ng t√¥i mang ƒë·∫øn c√°c lo·∫°i tr√°i c√¢y t∆∞∆°i ngon, theo ƒë√∫ng m√πa, ƒë∆∞·ª£c tuy·ªÉn ch·ªçn t·ª´ v∆∞·ªùn nh√† c·ªßa nh·ªØng ng∆∞·ªùi b√† con th√¢n quen. 
                Do ƒë√≥ c√°c lo·∫°i tr√°i c√¢y n√†y l√† nh·ªØng lo·∫°i tr√°i ƒëang ch√≠nh v·ª• v√† c√≥ th·ªÉ c√°c s·∫£n ph·∫©m s·∫Ω h·∫øt tr∆∞·ªõc khi m√πa v·ª• k·∫øt th√∫c.
                ƒê·ªëi v·ªõi h·∫°t, ƒë√¢y l√† m·ªôt trong nh·ªØng s·∫£n ph·∫©m ngon ƒë∆∞·ª£c tuy·ªÉn ch·ªçn k·ªπ l∆∞·ª°ng v·ªÅ m√πi v·ªã t·∫°i Bu√¥n H·ªì, x·ª© x·ªü c·ªßa m·∫Øc ca ƒë·ªÉ ƒë·∫£m b·∫£o ch·∫•t l∆∞·ª£ng lu√¥n t∆∞∆°i m·ªõi m·ªói m√πa.
                 

    ‚úÖ Cam k·∫øt:
    - N√¥ng s·∫£n s·∫°ch ‚Äì ch√≠nh v·ª•, kh√¥ng ch·∫•t b·∫£o qu·∫£n.
    - Giao h√†ng to√†n qu·ªëc.
    - H·ªó tr·ª£ ƒë·ªïi tr·∫£.
    - Giao h√†ng trong v√≤ng 1-3 ng√†y (t√πy t·ª´ng ƒë·ª£t h√†ng).
    - Mi·ªÖn ph√≠ giao h√†ng t·∫°i TP.HCM cho ƒë∆°n h√†ng >= 10kg b∆° / 5kg m·∫Øc ca / 5kg s·∫ßu ri√™ng.

    üìû Li√™n h·ªá: **0989 29 26 54** (zalo)
    """)


